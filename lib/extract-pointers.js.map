{"version":3,"sources":["lib/extract-pointers.es6"],"names":[],"mappings":";;;;;;;;;oBAoGwB,eAAe;;;;;;;;;;;;;;;AApFvC,YAAS,UAAU,CAAE,MAAM,EAAE,QAAQ,EAAG;AACrC,UAAI,MAAM,YAAY,KAAK,EAAG;AAC3B,gBAAO,OAAO,CAAC,GAAG,CAAE,MAAM,CAAC,GAAG,CAAE,QAAQ,CAAE,CAAE,CAAC;OAC/C,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAG;;AACrC,gBAAI,MAAM,GAAG,EAAE,CAAC;AAChB;kBAAO,OAAO,CAAC,GAAG,CAAE,MAAM,CAAC,IAAI,CAAE,MAAM,CAAE,CAAC,GAAG,CAAE,UAAE,GAAG,EAAM;AACvD,0BAAQ,CAAE,MAAM,CAAE,GAAG,CAAE,CAAE,CAAC,IAAI,CAAE,UAAU,KAAK,EAAG;AAC/C,2BAAM,CAAE,GAAG,CAAE,GAAG,KAAK,CAAC;mBACxB,CAAE,CAAC;gBACN,CAAE,CAAE,CAAC,IAAI,CAAE;yBAAM,MAAM;gBAAA,CAAE;cAAC;;;;OAC7B;IACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BD,YAAS,cAAc,CAAE,MAAM,EAAE,QAAQ,EAAG;;AAEzC,eAAS,OAAO,CAAE,MAAM,EAAG;AACxB,aAAI;AACD,gBAAM,MAAM,GAAG,UAAU,CAAE,MAAM,EAAE,OAAO,CAAE,IAAI,QAAQ,CAAE,MAAM,CAAE,CAAC;AACnE,mBAAO,AAAE,OAAO,MAAM,CAAC,IAAI,KAAK,UAAU,GAAK,MAAM,GAAG,OAAO,CAAC,OAAO,CAAE,MAAM,CAAE,CAAC;UACpF,CACD,OAAO,KAAK,EAAG;AACZ,mBAAO,OAAO,CAAC,MAAM,CAAE,KAAK,CAAE,CAAC;UACjC;OACH,CAAC;;AAEF,aAAO,OAAO,CAAE,MAAM,CAAE,CAAC;IAC3B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8Ba,YAAS,eAAe,CAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAG;AACnE,aAAO,cAAc,CAAE,QAAQ,EAAE,UAAU,OAAO,EAAG;AAClD,aAAM,KAAK,GAAG,qBAAS,IAAI,CAAC,UAAU,CAAE,MAAM,EAAE,gCAAe,OAAO,CAAE,CAAE,CAAC;AAC3E,gBAAO,QAAQ,CAAE,KAAK,EAAE,OAAO,CAAE,CAAC;OACpC,CAAE,CAAC;IACN;;AAAA,IAAC","file":"lib/extract-pointers.es6","sourcesContent":["/**\n * Copyright 2015 aixigo AG\n * Released under the MIT license.\n * http://laxarjs.org/license\n */\n\nimport patterns from 'laxar-patterns';\nimport toJsonPointer from './to-json-pointer';\n\n/**\n * Like [].map but also for Object properties and working with promises.\n *\n * @param {Object|Array} object\n * @param {Function} callback\n * @return {Promise}\n */\nfunction mapPromise( object, callback ) {\n   if( object instanceof Array ) {\n      return Promise.all( object.map( callback ) );\n   } else if( typeof object === 'object' ) {\n      let result = {};\n      return Promise.all( Object.keys( object ).map( ( key ) => {\n         callback( object[ key ] ).then( function( value ) {\n            result[ key ] = value;\n         } );\n      } ) ).then( () => result );\n   }\n}\n\n/**\n * Apply the given callback to each leaf-node of the input object and return\n * promise resolving to an object of the same shape, where the leave nodes\n * are replaced with the return values of the callback (or the values they\n * resolve to, if the callback returns a promise).\n *\n * Example:\n *\n *     deepMapPromise( [\n *        {\n *           repo: 'https://api.github.com/repos/LaxarJS/laxar',\n *           issues: 'https://api.github.com/issues/LaxarJS/laxar'\n *        },\n *        {\n *           repo: 'https://api.github.com/repos/LaxarJS/laxar',\n *           issues: 'https://api.github.com/issues/LaxarJS/laxar'\n *        }\n *     ], fetch ).then( function( results ) {\n *        results[ 0 ].repo instanceof Response;\n *        results[ 0 ].issues instanceof Response;\n *        results[ 1 ].repo instanceof Response;\n *        results[ 1 ].issues instanceof Response;\n *     } );\n *\n * @param {Object|Array} object\n * @param {Function} callback\n * @return {Promise}\n */\nfunction deepMapPromise( object, callback ) {\n\n   function recurse( object ) {\n      try {\n         const result = mapPromise( object, recurse ) || callback( object );\n         return ( typeof result.then === 'function' ) ? result : Promise.resolve( result );\n      }\n      catch( error ) {\n         return Promise.reject( error );\n      }\n   };\n\n   return recurse( object );\n};\n\n/**\n * Take a source object and an object/array/string of JSON pointers, call the\n * given callback for each pointer, with the value of the property of source object\n * referenced by the pointer and finally, resolve the returned promise with an object\n * of the same shape as the pointers object where the pointers are replaced with\n * the return values of the callback.\n *\n * Example:\n *\n *     extractPointers( {\n *        id: 123,\n *        user: {\n *           url: 'https://localhost/user.json',\n *        },\n *        data_url: 'https://localhost/data.json'\n *     }, {\n *        user: '/user/url',\n *        data: '/data_url'\n *     }, fetch ).then( function( results ) {\n *        results.user instanceof Response;\n *        results.data instanceof Response;\n *     } );\n *\n * @param {Object|Array} object\n * @param {Object|Array|String} pointers\n * @param {Function} callback\n * @return {Promise}\n */\nexport default function extractPointers( object, pointers, callback ) {\n   return deepMapPromise( pointers, function( pointer ) {\n      const value = patterns.json.getPointer( object, toJsonPointer( pointer ) );\n      return callback( value, pointer );\n   } );\n};\n"]}